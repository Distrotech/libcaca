$Id$

Building libcaca

   o  Run configure then make. Useful configure flags are:

     --enable-slang: use the SLang library (default)
     --enable-ncurses: use the ncurses library
     --enable-conio: use MS-DOS conio.h

   o  Cross-compilation example:
 
     ./configure --enable-conio --host=i386-pc-msdosdjgpp


Using libcaca

   o  Look into the examples/ directory for simple source code examples.

   o  Compiling a libcaca program is fairly simple:

      gcc -c foobar.c -o foobar.o `caca-config --cflags`
      gcc foobar.o -o foobar `caca-config --libs`

   o  If you are writing a shared object that uses libcaca, either a
      dynamically loadable plug-in or a shared library, you should use
      the `--plugin-libs' flag for libcaca:

      gcc -fPIC -c libfoo.c -o libfoo.o `caca-config --cflags`
      gcc -shared libfoo.o -o libfoo.so `caca-config --plugin-libs`


Binary packages

   o  As the API is not stable yet, everyone should statically link libcaca
      with their programs or libraries. DO NOT DISTRIBUTE SHARED VERSIONS
      OF LIBCACA.

